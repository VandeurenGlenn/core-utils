#! /usr/bin/env node 

import { program } from "commander";
import { execute } from "./../utils.js";

const args = process.argv.slice(2, process.argv.length)
program
  .command('vdir')
  .description("")
  .param('-cftuSUX nor --sort.', `-cftuSUX nor --sort.`)
	.param('-a, --all', `-a, --all`)
	.param('-A, --almost-all', `-A, --almost-all`)
	.param('--author', `with -l, print the author of each file`)
	.param('-b, --escape', `-b, --escape`)
	.param('--block-size=SIZE', `use SIZE-byte blocks`)
	.param('-B, --ignore-backups', `-B, --ignore-backups`)
	.param('-c     with -lt: sort by, and show, ctime (time of  last', `-c     with -lt: sort by, and show, ctime (time of  last`)
	.param('-C     list entries by columns', `-C     list entries by columns`)
	.param('--color[=WHEN]', `control whether color is used to distinguish file`)
	.param('-d, --directory', `-d, --directory`)
	.param('-D, --dired', `-D, --dired`)
	.param('-f     do not sort, enable -aU, disable -lst', `-f     do not sort, enable -aU, disable -lst`)
	.param('-F, --classify', `-F, --classify`)
	.param('--format=WORD', `across  -x,  commas  -m,  horizontal -x, long -l,`)
	.param('--full-time', `like -l --time-style=full-iso`)
	.param('-g     like -l, but do not list owner', `-g     like -l, but do not list owner`)
	.param('-G, --no-group', `-G, --no-group`)
	.param('-h, --human-readable', `-h, --human-readable`)
	.param('--si', ``)
	.param('-H, --dereference-command-line', `-H, --dereference-command-line`)
	.param('--dereference-command-line-symlink-to-dir', `follow  each  command  line  symbolic  link  that`)
	.param('--hide=PATTERN', `do not list implied entries matching  shell  PAT-`)
	.param('--indicator-style=WORD  append indicator with style WORD', `to entry names:`)
	.param('-i, --inode', `-i, --inode`)
	.param('-I, --ignore=PATTERN', `-I, --ignore=PATTERN`)
	.param('-k     like --block-size=1K', `-k     like --block-size=1K`)
	.param('-l     use a long listing format', `-l     use a long listing format`)
	.param('-L, --dereference', `-L, --dereference`)
	.param('-m     fill width with a comma separated list of entries', `-m     fill width with a comma separated list of entries`)
	.param('-n, --numeric-uid-gid', `-n, --numeric-uid-gid`)
	.param('-N, --literal', `-N, --literal`)
	.param('-o     like -l, but do not list group information', `-o     like -l, but do not list group information`)
	.param('-p, --file-type', `-p, --file-type`)
	.param('-q, --hide-control-chars', `-q, --hide-control-chars`)
	.param('--show-control-chars', `show non graphic characters as-is (default unless`)
	.param('-Q, --quote-name', `-Q, --quote-name`)
	.param('--quoting-style=WORD', `use  quoting style WORD for entry names: literal,`)
	.param('-r, --reverse', `-r, --reverse`)
	.param('-R, --recursive', `-R, --recursive`)
	.param('-s, --size', `-s, --size`)
	.param('-S     sort by file size', `-S     sort by file size`)
	.param('--sort=WORD', `extension -X, none -U, size -S, time -t,  version`)
	.param('-v,  status -c, time -t, atime -u, access -u, use', `-v,  status -c, time -t, atime -u, access -u, use`)
	.param('-u', `-u`)
	.param('--time=WORD', `with -l, show time as WORD instead  of  modifica-`)
	.param('--time-style=STYLE', `with -l, show times using style STYLE:  full-iso,`)
	.param('-t     sort by modification time', `-t     sort by modification time`)
	.param('-T, --tabsize=COLS', `-T, --tabsize=COLS`)
	.param('-u     with -lt: sort by, and show, access time with -l:', `-u     with -lt: sort by, and show, access time with -l:`)
	.param('-U     do not sort; list entries in directory order', `-U     do not sort; list entries in directory order`)
	.param('-v     sort by version', `-v     sort by version`)
	.param('-w, --width=COLS', `-w, --width=COLS`)
	.param('-x     list entries by lines instead of by columns', `-x     list entries by lines instead of by columns`)
	.param('-X     sort alphabetically by entry extension', `-X     sort alphabetically by entry extension`)
	.param('-1     list one file per line', `-1     list one file per line`)
	.param('--help', ``)
	.param('--version', `output version information and exit`)
  .action(() => execute('vdir', args))
    
    